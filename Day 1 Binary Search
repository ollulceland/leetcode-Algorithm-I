# 704. Binary Search:
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) -1
        while left <= right:
            pivot = left + (right - left) // 2
            if nums[pivot] == target:
                return pivot
            if target < nums[pivot]:
                right = pivot -1
            else:
                left = pivot + 1
        return -1
        
# 278. First Bad Version:
# The isBadVersion API is already defined for you.
# @param version, an integer
# @return an integer
# def isBadVersion(version):        
class Solution:
    def firstBadVersion(self, n):
        """
        :type n: int
        :rtype: int
        """
        left,right = 0,n
        while left < right:
            mid = (left + right) // 2
            if isBadVersion(mid):
                right = mid
            else:
                left = mid + 1
        return left
        
# 35. Search Insert Position:
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:  
        start = 0
        end = len(nums) - 1        
        while start + 1 < end:
            mid = start + (end - start) // 2                 
            if nums[mid] == target:
                end = mid
            elif nums[mid] < target:
                start = mid
            else:
                end = mid        
        if nums[start] >= target:
            return start        
        if nums[end] >= target:
            return end        
        return end + 1
